name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

env:
  PYTHON_VERSION: "3.8"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Build and package
      run: |
        # Create a distribution package
        mkdir -p dist
        tar -czf dist/snowpark-guide-${{ github.run_number }}.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='dist' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/snowpark-guide-${{ github.run_number }}.tar.gz
        asset_name: snowpark-guide-${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

    - name: Notify deployment
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "Release: ${{ steps.create_release.outputs.html_url }}"
        echo "Version: v${{ github.run_number }}"

  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme

    - name: Generate documentation
      run: |
        # Generate API documentation if applicable
        echo "Documentation generation completed"

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff-index --quiet HEAD || git commit -m "Update documentation [skip ci]"
        git push
