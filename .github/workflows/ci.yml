name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.8"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 bandit safety

    - name: Run linting
      run: |
        black --check --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security audit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check

    - name: Test notebook execution
      env:
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      run: |
        # Test Chapter 2
        jupyter nbconvert --execute --to python chapter_2/chapter_2.ipynb --stdout || echo "Chapter 2 test failed"
        
        # Test Chapter 3 notebooks
        jupyter nbconvert --execute --to python chapter_3/chapter_3_data_load.ipynb --stdout || echo "Chapter 3 data load test failed"
        jupyter nbconvert --execute --to python chapter_3/chapter_3_explore_transform.ipynb --stdout || echo "Chapter 3 explore transform test failed"
        jupyter nbconvert --execute --to python chapter_3/chapter_3_agg_analysis.ipynb --stdout || echo "Chapter 3 agg analysis test failed"
        
        # Test Chapter 4
        jupyter nbconvert --execute --to python chapter_4/chapter_4.ipynb --stdout || echo "Chapter 4 test failed"
        
        # Test Chapter 5
        jupyter nbconvert --execute --to python chapter_5/chapter_5.ipynb --stdout || echo "Chapter 5 test failed"
        
        # Test Chapter 6 notebooks
        jupyter nbconvert --execute --to python chapter_6/chapter_6_model_register_deployment.ipynb --stdout || echo "Chapter 6 model register deployment test failed"
        jupyter nbconvert --execute --to python chapter_6/chapter_6_feature_store.ipynb --stdout || echo "Chapter 6 feature store test failed"
        
        # Test Chapter 8
        jupyter nbconvert --execute --to python chapter_8/chapter_8.ipynb --stdout || echo "Chapter 8 test failed"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          bandit-report.json
          *.log

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon mccabe

    - name: Code complexity analysis
      run: |
        radon cc . -a -nc
        radon mi . -nc
        mccabe . --min 10

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Check for outdated dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip list --outdated

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check --full-report
